<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>SkyLyrac - gameboy</title><link href="http://www.skylyrac.net/" rel="alternate"></link><link href="http://www.skylyrac.net/feeds/gameboy.atom.xml" rel="self"></link><id>http://www.skylyrac.net/</id><updated>2018-02-05T23:42:00+00:00</updated><entry><title>RGBDS - Rednex Game Boy Development System</title><link href="http://www.skylyrac.net/2018-02-05-rgbds.html" rel="alternate"></link><published>2018-02-05T23:42:00+00:00</published><updated>2018-02-05T23:42:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2018-02-05:/2018-02-05-rgbds.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/rednex/rgbds"&gt;RGBDS&lt;/a&gt; is a toolchain to develop in assembly
for the Game Boy. It is used by many projects nowadays, and I'm not talking
about small ones:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Disassemblies of games released during the lifetime of the GB:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokered"&gt;https://github.com/pret/pokered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokecrystal"&gt;https://github.com/pret/pokecrystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokepinball"&gt;https://github.com/pret …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/rednex/rgbds"&gt;RGBDS&lt;/a&gt; is a toolchain to develop in assembly
for the Game Boy. It is used by many projects nowadays, and I'm not talking
about small ones:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Disassemblies of games released during the lifetime of the GB:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokered"&gt;https://github.com/pret/pokered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokecrystal"&gt;https://github.com/pret/pokecrystal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pret/pokepinball"&gt;https://github.com/pret/pokepinball&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Completely new projects:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ISSOtm/Aevilia-GB"&gt;https://github.com/ISSOtm/Aevilia-GB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Of course, it's the toolchain I use for my own projects:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/AntonioND/ucity"&gt;https://github.com/AntonioND/ucity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/AntonioND/back-to-color"&gt;https://github.com/AntonioND/back-to-color&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/AntonioND/geometrix"&gt;https://github.com/AntonioND/geometrix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only real alternative is &lt;a class="reference external" href="https://github.com/vhelin/wla-dx"&gt;WLA DX&lt;/a&gt;, as
far as I know. I personally don't like the syntax (because of small things like
using parentheses instead of square brackets for indirection) but it is probably
as powerful as RGBDS, and it's worth taking a look at it if you want to do
something serious for the GB.&lt;/p&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;It was released in 1997 as ASMotor by Carsten Sørensen as a general-purpose
assembler for DOS/Win32. In 1999, it was modified by Justin Lloyd and released
as RGBDS. In 2009, Vegard Nossum adapted the code for the toolchain to be more
UNIX-like and released it as rgbds-linux. In 2010, Anthony J. Bentley forked the
repository and improved on it, becoming the reference implementation of RGBDS.
Then, in February 2017, he asked me if I wanted to be its new maintainer, I
accepted, and he moved the repository to a neutral username. Basically, I was
one of the few people still proposing new changes and fixes, so it was a safe
choice.&lt;/p&gt;
&lt;p&gt;Nowadays, this project is located here: &lt;a class="reference external" href="https://github.com/rednex/rgbds"&gt;https://github.com/rednex/rgbds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is important to know that during all this time (20 years!) many people have
contributed to it, not only the main maintainers mentioned above. This had left
the codebase in a really complicated licensing situation. The original code was
released without a license, and pretty much every new contributor used a
variation of the BSD or MIT license for new changes.&lt;/p&gt;
&lt;p&gt;This is why I tried (and succeeded!) to get all the main authors to agree to
change the license so that all the codebase would have the same one. In the end,
all of the main contributors answered and gave permission to relicense their
code, and the MIT license was chosen: &lt;a class="reference external" href="https://github.com/rednex/rgbds/pull/225"&gt;https://github.com/rednex/rgbds/pull/225&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In any case, because of its story, I don't think it makes sense to consider this
the project of a specific person in particular. At some point it just becomes a
project of the community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-works"&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;RGBDS is divided into &lt;strong&gt;rgbasm&lt;/strong&gt;, &lt;strong&gt;rgblink&lt;/strong&gt;, &lt;strong&gt;rgbfix&lt;/strong&gt; and &lt;strong&gt;rgbgfx&lt;/strong&gt;. In the
past, there was another tool called rgblib, but it was quite pointless as nobody
really used it, and the object format breaks quite often when adding new
features to the toolchain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;rgbasm&lt;/strong&gt;: Assembler.&lt;/p&gt;
&lt;p&gt;It takes a file with source code as input and generates an object file as
output. It uses yacc/bison to parse files, which is a bit problematic because
of the source code syntax and how hard it is to resolve conflicts.&lt;/p&gt;
&lt;p&gt;It is really flexible. It has support for macros, unions, even for referencing
local labels through the parent label. Of course, the address of labels is not
always known at compile time, it is only known if the value is directly
assigned, or if the base address of the section is directly assigned. In order
to be able to resolve their address at linking time, or even be able to
calculate simple expressions with them (addition, bit masks...) there is a RPN
language that is used in object files to tell the linker how to operate with
them. Each value that has to be modified by the linker generates a patch of
RPN instructions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;rgblink&lt;/strong&gt;: Linker.&lt;/p&gt;
&lt;p&gt;It reads all object files generated by rgbasm (and potentially a linkerscript
with information about where to place sections) and generates a raw GB ROM,
that is not generally ready to directly use in a GB.&lt;/p&gt;
&lt;p&gt;In short, it places all sections in their final locations and calculates the
final value of all RPN patches. It can also generate files with a list of
labels and addresses to help debugging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;rgbfix&lt;/strong&gt;: ROM fixer.&lt;/p&gt;
&lt;p&gt;Used to fix a finished GB ROM. There are some fields in the header that must
have the correct value for the game to boot in a real GB. Some of this fields
are difficult to fill at linking time, so it's easier to have an external tool
for it, that's where rgbfix comes in handy. It also pads a ROM if the size
isn't a power of two.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;rgbgfx&lt;/strong&gt;: Graphics converter.&lt;/p&gt;
&lt;p&gt;This tool converts png files into the format that the GB uses. I must admit
that I've never used this tool, but it is used in disassemblies extensively.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I find it really interesting that this toolchain has managed to survive for such
a long time, and that it is still used so much. It's mostly used by
disassemblers, I must admit, but hey!&lt;/p&gt;
&lt;p&gt;As I've said before, this project wouldn't be nearly as useful if it wasn't
thanks to all of its contributors. Because of it, it is always open to
contributions. They don't have to be big or fancy, even small bug reports (or
bug fixes!) are welcome. So yeah, let's keep this project alive!&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="gameboy"></category></entry><entry><title>µCity v1.2</title><link href="http://www.skylyrac.net/2018-01-31-ucity-v1-2.html" rel="alternate"></link><published>2018-01-31T02:10:00+00:00</published><updated>2018-01-31T02:10:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2018-01-31:/2018-01-31-ucity-v1-2.html</id><summary type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;It's a bit late to publish this, but hey, it only comes 7 months late! I had no
website to upload this to, anyway...&lt;/p&gt;
&lt;p&gt;In any case, here it is, &lt;strong&gt;µCity&lt;/strong&gt;, the  open-source city-building game for Game
Boy Color! It can also be spelled 'uCity', but it's pronounced …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;It's a bit late to publish this, but hey, it only comes 7 months late! I had no
website to upload this to, anyway...&lt;/p&gt;
&lt;p&gt;In any case, here it is, &lt;strong&gt;µCity&lt;/strong&gt;, the  open-source city-building game for Game
Boy Color! It can also be spelled 'uCity', but it's pronounced 'micro-city'.&lt;/p&gt;
&lt;img alt="Screenshot of µCity" class="align-center" src="./images/ucity-screenshot.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This game is completely free, licensed under the GPLv3+. Just download the ROM,
install a Game Boy Color emulator, and play! The last release of the game should
be here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/ucity/releases"&gt;https://github.com/AntonioND/ucity/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also play on real hardware. Even though the game has been developed
using mainly emulators, it has been verified to work on hardware. The game
detects how much available space there is and adjust the maximum number of saved
cities accordingly.&lt;/p&gt;
&lt;p&gt;Here's a &lt;a class="reference external" href="https://www.youtube.com/watch?v=2rir-TVx020"&gt;video&lt;/a&gt;, in case you are
too lazy to test the ROM. If needed, there is a short manual with instructions
for the player in the file &lt;tt class="docutils literal"&gt;manual.rst&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I've been asked quite a few times about this, so I might as well clarify it. A
direct port of this game to the monochrome Game Boy isn't possible. This game
uses most of the extra RAM that was added to the Game Boy Color, which isn't
available in a regular Game Boy. While the Game Boy Color has 32 KiB of WRAM,
the Game Boy only has 8 KB, and this game currently uses 30 KB more or less.
Only a really limited version of this game with a much smaller map and much
fewer features would fit in a Game Boy.&lt;/p&gt;
&lt;p&gt;Oh, and this game has its own article in Hackaday!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://hackaday.com/2017/06/20/writing-a-new-game-for-the-game-boy-color/"&gt;https://hackaday.com/2017/06/20/writing-a-new-game-for-the-game-boy-color/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to actually take a look at it, the &lt;a class="reference external" href="https://github.com/AntonioND/ucity"&gt;source code is available here&lt;/a&gt;. An open-source project is a lot worse
without documentation, though! That's why the code has a lot of comments and why
there is a highly detailed documentation in the &lt;tt class="docutils literal"&gt;docs&lt;/tt&gt; folder. And also
because assembly code without comments can't be understood even by the developer
who wrote it originally. :) To compile it, you'll just need &lt;a class="reference external" href="https://github.com/rednex/rgbds/"&gt;RGBDS&lt;/a&gt;. It should be possible to compile the game
on Linux, MinGW, Cygwin, etc.&lt;/p&gt;
&lt;p&gt;Other tools used to create the game are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://openmpt.org/"&gt;Open ModPlug Tracker&lt;/a&gt;: This is just a program to edit
tracker style music. It has been used to compose the music used by GBT Player,
my music player library. It can be found &lt;a class="reference external" href="https://github.com/AntonioND/gbt-player"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.devrs.com/gb/hmgd/gbtd.html"&gt;GBTD&lt;/a&gt; (Game Boy Tile Designer) and
&lt;a class="reference external" href="http://www.devrs.com/gb/hmgd/gbmb.html"&gt;GBMB&lt;/a&gt; (Game Boy Map Builder):
Graphics edition tools (for Windows, but they run on Wine).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;beware: For the emulator BGB (&lt;a class="reference external" href="http://bgb.bircd.org/"&gt;http://bgb.bircd.org/&lt;/a&gt;), extremely useful tool
used to develop this game.&lt;/li&gt;
&lt;li&gt;Pan of Anthrox, Marat Fayzullin, Pascal Felber, Paul Robson, Martin Korth
(nocash) and kOOPa for the pandocs.&lt;/li&gt;
&lt;li&gt;Otaku No Zoku (Justin Lloyd) for the Gameboy Crib Sheet.&lt;/li&gt;
&lt;li&gt;Everyone that has contributed to develop &lt;tt class="docutils literal"&gt;RGBDS&lt;/tt&gt; over the years, specially
Carsten Sorensen, Justin Lloyd, Vegard Nossum and Anthony J. Bentley.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PS: If the name of the game breaks your website, fix your website. :P&lt;/p&gt;
</content><category term="gameboy"></category><category term="programming"></category></entry><entry><title>Geometrix [GBC Game][GBDev 2015]</title><link href="http://www.skylyrac.net/2015-12-04-geometrix-gbc-game-gbdev-2015.html" rel="alternate"></link><published>2015-12-04T16:32:00+00:00</published><updated>2018-02-01T23:27:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2015-12-04:/2015-12-04-geometrix-gbc-game-gbdev-2015.html</id><summary type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;This is my entry for the &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?pid=1385"&gt;GBdev Game Boy Coding Compo 2015&lt;/a&gt;! Sadly, &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?pid=1448"&gt;only one more
game entered the compo&lt;/a&gt;.
But anyway, here it is!&lt;/p&gt;
&lt;p&gt;Video: &lt;a class="reference external" href="https://www.youtube.com/watch?v=qAvW2n8Qbeg"&gt;https://www.youtube.com/watch?v=qAvW2n8Qbeg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source, binary and more information:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/geometrix"&gt;https://github.com/AntonioND/geometrix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Screenshots:&lt;/p&gt;
&lt;img alt="Screenshot of Geometrix" class="align-center" src="./images/geometrix.png" /&gt;
</summary><content type="html">&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;This is my entry for the &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?pid=1385"&gt;GBdev Game Boy Coding Compo 2015&lt;/a&gt;! Sadly, &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?pid=1448"&gt;only one more
game entered the compo&lt;/a&gt;.
But anyway, here it is!&lt;/p&gt;
&lt;p&gt;Video: &lt;a class="reference external" href="https://www.youtube.com/watch?v=qAvW2n8Qbeg"&gt;https://www.youtube.com/watch?v=qAvW2n8Qbeg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Source, binary and more information:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/geometrix"&gt;https://github.com/AntonioND/geometrix&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Screenshots:&lt;/p&gt;
&lt;img alt="Screenshot of Geometrix" class="align-center" src="./images/geometrix.png" /&gt;
</content><category term="gameboy"></category><category term="programming"></category></entry><entry><title>GBT Player usage</title><link href="http://www.skylyrac.net/2015-04-08-gbt-player-usage.html" rel="alternate"></link><published>2015-04-08T01:36:00+01:00</published><updated>2018-02-01T23:23:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2015-04-08:/2015-04-08-gbt-player-usage.html</id><summary type="html">&lt;p&gt;Over the last months I've seen a few tutorials about GB programming that use my
GBT Player for music. I have to say a few things about that.&lt;/p&gt;
&lt;p&gt;First: Thanks a lot for using my library! The fact that you like it enough to
use it in your projects is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the last months I've seen a few tutorials about GB programming that use my
GBT Player for music. I have to say a few things about that.&lt;/p&gt;
&lt;p&gt;First: Thanks a lot for using my library! The fact that you like it enough to
use it in your projects is what keeps it alive. Version 2 only happened because
I was asked to add a few things to previous versions.&lt;/p&gt;
&lt;p&gt;Second: &lt;strong&gt;You are using it wrong!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ok, it's partly my fault, but it's your fault too, obviously: &lt;em&gt;You are using
GBDK&lt;/em&gt;... I mean, you just don't understand the implications of the ROM banking
system the GB uses. I know I don't really have to explain this kind of things,
but I feel a bit responsible for my library, so I'm going to explain why you are
using it wrong and how to fix it. Let's see...&lt;/p&gt;
&lt;p&gt;My (now old) example does something like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;gb/gb.h&amp;gt; // Include GBDK lib&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
 &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;gbt_player.h&amp;quot; // Include player&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

 &lt;span class="c1"&gt;// Reference to song data&lt;/span&gt;
 &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;song_Data&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

 &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// Disable interrupts while they are being configured&lt;/span&gt;
     &lt;span class="n"&gt;disable_interrupts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="n"&gt;gbt_play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;song_Data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Setup song&lt;/span&gt;
     &lt;span class="n"&gt;gbt_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// The default is 0, this could be removed&lt;/span&gt;

     &lt;span class="n"&gt;add_VBL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gbt_update&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Add callback for VBL interrupt (*)&lt;/span&gt;

     &lt;span class="n"&gt;set_interrupts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VBL_IFLAG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Enable VBL interrupt&lt;/span&gt;
     &lt;span class="n"&gt;enable_interrupts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;wait_vbl_done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Wait loop with reduced CPU usage&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;While the new one does this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;gb/gb.h&amp;gt; // Include GBDK lib&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
 &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;quot;gbt_player.h&amp;quot; // Include player&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

 &lt;span class="c1"&gt;// Reference to song data&lt;/span&gt;
 &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;song_Data&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

 &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="c1"&gt;// Disable interrupts while they are being configured&lt;/span&gt;
     &lt;span class="n"&gt;disable_interrupts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="n"&gt;gbt_play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;song_Data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Setup song&lt;/span&gt;
     &lt;span class="n"&gt;gbt_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// The default is 0, this could be removed&lt;/span&gt;

     &lt;span class="n"&gt;set_interrupts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VBL_IFLAG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Enable VBL interrupt&lt;/span&gt;
     &lt;span class="n"&gt;enable_interrupts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

     &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;wait_vbl_done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Wait loop with reduced CPU usage&lt;/span&gt;

         &lt;span class="n"&gt;gbt_update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Update player (*)&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;So what's the big deal?&lt;/p&gt;
&lt;p&gt;Well, let's explain how the GB banking system works. You should know that. If
you don't know that, you shouldn't be coding for GB, but whatever... The first
16 KB of the ROM are always mapped to addresses &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;0000h-3FFFh&lt;/span&gt;&lt;/tt&gt;. This means that
this code and data is always available to read! That's the place where you want
your game engine to be. But GBT code doesn't go there by default. It goes to
bank 1. Why? Because 16 KB is not much space. GBT player needs quite a bit of
space and it's stupid to put it in bank 0 when GBDK is already using a lot of
that space. It would leave you even less space for your code!&lt;/p&gt;
&lt;p&gt;Banks 1 and beyond are mapped to addresses &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;4000h-7FFFh&lt;/span&gt;&lt;/tt&gt;. Only one of them can
be mapped at once there, so they must be switched when the program needs to
access to data in other bank. This means that you can have as much 16 KB banks
as you need (so you could have ROMs with &lt;em&gt;infinite&lt;/em&gt; banks), but you have to take
care to switch to the correct bank whenever you are trying to get some data or
execute some code.&lt;/p&gt;
&lt;p&gt;So GBT runs in bank 1, again, what's the big deal?&lt;/p&gt;
&lt;p&gt;The problem here is that the first example uses interrupt for the player update
function. If your game loop is small, and your ROM is small, and your game is
more or less a &amp;quot;Hello World!&amp;quot; this won't be a problem because you won't use bank
switching and bank 1 will always be available. If your game is big and you need
to load data from other banks, there are problems because you will sometimes use
data from other banks (in fact, GBT Player loads data from the bank where the
song is placed, but it returns to bank 1 afterwards to execute its code).&lt;/p&gt;
&lt;p&gt;An interrupt means that the CPU jumps to an interrupt vector, executes its code
and then returns to its previous state. Again, you should know that. If you
don't, something is wrong and you should stop and learn this kind of things
first. But you won't, that's why I'm explaining this. This is useful to know
when hardware events happen, like screen redraw. Vertical blanking period is
entered when the current frame has been drawn, so it happens once every frame
(around 60 times per second). This interrupt is very useful to synchronize the
game, and GBT Player uses it to update itself.&lt;/p&gt;
&lt;p&gt;Let's say you want to load a background placed in bank 4. You switch to bank 4,
start copying... and vertical blank period is reached. An interrupt is triggered
and CPU jumps to the VBL interrupt vector at address &lt;tt class="docutils literal"&gt;0040h&lt;/tt&gt;. It eventually
calls &lt;tt class="docutils literal"&gt;gbt_update()&lt;/tt&gt;, which switches to bank 1, and returns. The CPU returns
to the same state as before the interrupt... but the ROM bank is still bank 1,
so the copy won't work because it's reading incorrect data! This can also happen
with code. In that case, the game is likely to crash immediately. If you only
had banks 0 and 1, this couldn't happen. That's why small demos and games run
fine, but they will eventually crash if they are more than 32 KB big (2 banks).&lt;/p&gt;
&lt;p&gt;That's why the code of &lt;tt class="docutils literal"&gt;gbt_player.h&lt;/tt&gt; says &amp;quot;this changes to bank 1!&amp;quot;. To warn
you that this does changes to the memory that you have to revert. I don't know
what system GBDK uses to know what ROM bank is being used or anything like that.
When I made a game (that I didn't finish) I created a ROM bank stack to keep
track of the banks that I used, so I could save the bank that was being used
when &lt;tt class="docutils literal"&gt;gbt_update()&lt;/tt&gt; was called and I could restore it afterwards. I suppose
most of you won't be able to do something like that, so the new example is an
alternative.&lt;/p&gt;
&lt;p&gt;The new example calls &lt;tt class="docutils literal"&gt;gbt_update()&lt;/tt&gt; every frame in the main loop of the game.
You need to put it in EVERY main loop, and you need to synchronize the game to
VBL with &lt;tt class="docutils literal"&gt;wait_vbl_done()&lt;/tt&gt;. That's it. No more problems of banking. Well,
there still can be problems, but it's more difficult. If you can write code that
has that kind of problems, you should be able to fix them.&lt;/p&gt;
&lt;p&gt;In fact, if your game doesn't use &lt;tt class="docutils literal"&gt;wait_vbl_done()&lt;/tt&gt;, your game is evil. This
function enters a low consumption state until VBL is entered, and it should be
used whenever it's possible. I've seen code of &amp;quot;games&amp;quot; that don't use it. They
are bad. No, seriously, use that function. Please.&lt;/p&gt;
&lt;p&gt;Examples of bad tutorials (I could only find 2 right now, both in Spanish):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.elotrolado.net/hilo_desarrollo-software-proyectos-de-darkryoga_1901847"&gt;http://www.elotrolado.net/hilo_desarrollo-software-proyectos-de-darkryoga_1901847&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.fasebonus.net/foro/index.php?topic=36662.msg60626#msg60626"&gt;http://www.fasebonus.net/foro/index.php?topic=36662.msg60626#msg60626&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: But you are, in fact, using GBDK, which should be avoided. :P It's better if
you try to learn ASM and use RGBDS or WLA-DX assemblers instead. The GB CPU is
very slow, so you need every CPU cycle you can get. Maybe you are doing a
text-only game, and then GBDK should be fine, but you are wasting a lot of CPU
power. GBDK functions are mostly written in ASM. I know it's harder and you want
to see results right now, but it's better.&lt;/p&gt;
&lt;p&gt;PS2: Anyway, update to the latest version (2.1.1 at the time of writing this,
the same as 2.1.0 but with a new GBDK example):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gbt-player"&gt;https://github.com/AntonioND/gbt-player&lt;/a&gt;&lt;/p&gt;
</content><category term="gameboy"></category><category term="programming"></category></entry><entry><title>Back to Color [GBC Demo][GBDev 2014]</title><link href="http://www.skylyrac.net/2014-06-30-back-to-color-gbc-demo-gbdev-2014.html" rel="alternate"></link><published>2014-06-30T00:01:00+01:00</published><updated>2018-02-01T23:19:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2014-06-30:/2014-06-30-back-to-color-gbc-demo-gbdev-2014.html</id><summary type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm here to show you my first GBC demo! Made specially for the &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?id=173"&gt;2014
GBDev Game Boy Coding Compo&lt;/a&gt;.
In fact, I started it like four years ago, but stopped after doing 3 scenes (the
first effect, the text scroller at the end of the first …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm here to show you my first GBC demo! Made specially for the &lt;a class="reference external" href="http://gbdev.gg8.se/forums/viewtopic.php?id=173"&gt;2014
GBDev Game Boy Coding Compo&lt;/a&gt;.
In fact, I started it like four years ago, but stopped after doing 3 scenes (the
first effect, the text scroller at the end of the first song and the colorful
horizontal bars before the matrix effect). I've coded the rest in just a few
weeks, in fact I started doing new effects a few days before the GBDev compo
announcement. I've coded it and made the music, the only thing I haven't done is
the train screen graphics and the credits graphics (by jordirafel). I'm not a
very good musician, so... Oh, and it shows a little credits screen in non-color
GBs! Some screenshots here:&lt;/p&gt;
&lt;img alt="Screenshots of Back to Color in GBC mode" class="align-center" src="./images/back_to_color_screenshots.png" style="width: 100%;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="Screenshot of Back to Color in DMG mode" class="align-center" src="./images/back_to_color_dmg_screenshot.png" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And here it is, the download link:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/back_to_color.zip"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want to test it in an emulator (like &lt;a class="reference external" href="http://bgb.bircd.org/"&gt;BGB,&lt;/a&gt;
&lt;a class="reference external" href="http://sourceforge.net/projects/gambatte/"&gt;Gambatte&lt;/a&gt; or &lt;a class="reference external" href="http://vba-m.com/"&gt;VBA-M&lt;/a&gt;), most of them have a &amp;quot;Frame Blending&amp;quot; option, enable it
if possible. It works in real hardware, of course! Tested in DMG, MGB, GBC, GBA
and GBA SP. If you want to skip some parts, hold up/right/down/left when the
demo is loading if you want to skip 1/2/3/4 songs. Non-color GB only show the
reduced credits screen!&lt;/p&gt;
&lt;p&gt;I have also recorded a video with VBA-M in case you are too lazy to
download an emulator! :P The shadows in the bouncing balls effect are
incorrect, they should be the same color, but the rest is correct. In a
real GBC or an emulator it looks fine.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=eSEsd1OGA74"&gt;https://www.youtube.com/watch?v=eSEsd1OGA74&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The demo has been coded using &lt;a class="reference external" href="https://github.com/AntonioND/rgbds"&gt;my fork of RGBDS&lt;/a&gt; (with a few bugfixes), a &lt;a class="reference external" href="https://github.com/AntonioND/gbt-player"&gt;GBT Player&lt;/a&gt; version modified to use only the
first ROM bank, OpenMPT to make the music, GBTK and GBMB. To test it I've used
BGB, Gambatte, VBA-M, my &lt;a class="reference external" href="https://github.com/AntonioND/giibiiadvance"&gt;GiiBiiAdvance&lt;/a&gt;... and real hardware.&lt;/p&gt;
&lt;p&gt;I hope you like it! :)&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;Oh...&lt;/p&gt;
&lt;p&gt;One last thing...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/back-to-color"&gt;Source code GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yeah, that's everything. :P&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of 2018-01-31, this demo should be able to compile with the upstream RGBDS,
that is located here: &lt;a class="reference external" href="https://github.com/rednex/rgbds"&gt;https://github.com/rednex/rgbds&lt;/a&gt;&lt;/p&gt;
</content><category term="gameboy"></category><category term="programming"></category><category term="demoscene"></category></entry><entry><title>GBT Player v1.2</title><link href="http://www.skylyrac.net/2014-05-01-gbt-player-v1-2.html" rel="alternate"></link><published>2014-05-01T15:36:00+01:00</published><updated>2014-05-01T15:36:00+01:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2014-05-01:/2014-05-01-gbt-player-v1-2.html</id><summary type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This is just a bugfix release. I've modified the samples included in the mod
file in order to avoid transposing notes when converting it with mod2gbt. This
means that you can use all notes from C3 to B8.&lt;/p&gt;
&lt;p&gt;You can find source, binaries and examples (RGBDS and GBDK …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This is just a bugfix release. I've modified the samples included in the mod
file in order to avoid transposing notes when converting it with mod2gbt. This
means that you can use all notes from C3 to B8.&lt;/p&gt;
&lt;p&gt;You can find source, binaries and examples (RGBDS and GBDK) for version 1.2
here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gbt-player/releases/tag/v1.2"&gt;https://github.com/AntonioND/gbt-player/releases/tag/v1.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And any other improvements, here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gbt-player"&gt;https://github.com/AntonioND/gbt-player&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bye!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an old version, please, check this link for the latest release:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/AntonioND/gbt-player/releases"&gt;https://github.com/AntonioND/gbt-player/releases&lt;/a&gt;&lt;/p&gt;
</content><category term="gameboy"></category><category term="programming"></category></entry><entry><title>GBT Player v1.1</title><link href="http://www.skylyrac.net/2009-10-24-gbt-player-v1-1.html" rel="alternate"></link><published>2009-10-24T16:06:00+01:00</published><updated>2018-02-01T22:49:00+00:00</updated><author><name>Antonio Niño Díaz</name></author><id>tag:www.skylyrac.net,2009-10-24:/2009-10-24-gbt-player-v1-1.html</id><summary type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm going to show you a music player... for Game Boy. :P It's very
easy to use, and easy to compose music for it. I've included source code (100%
asm) and templates for
&lt;a class="reference external" href="https://github.com/JustinLloyd/RGBDS-Gameboy-Development-System"&gt;RGBDS&lt;/a&gt; and
&lt;a class="reference external" href="http://gbdk.sourceforge.net/"&gt;GBDK&lt;/a&gt;. You have to compose the music in a
tracker in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;This time I'm going to show you a music player... for Game Boy. :P It's very
easy to use, and easy to compose music for it. I've included source code (100%
asm) and templates for
&lt;a class="reference external" href="https://github.com/JustinLloyd/RGBDS-Gameboy-Development-System"&gt;RGBDS&lt;/a&gt; and
&lt;a class="reference external" href="http://gbdk.sourceforge.net/"&gt;GBDK&lt;/a&gt;. You have to compose the music in a
tracker in the PC using a custom mod file included in the download. Available
effects and other instructions to modify it are in a text file in the download.
Then, you convert it using a special tool which will export the data to a GBDK c
file or a RGBDS asm file. Included templates can be compiled by double clicking
the bat files, so you can use them for testing your songs as you compose them
(I'd use the RGBDS one). For any other information, look at the readme, or ask
me. There is an example there, the rest should be self-explanatory.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/gbt_player_v1_0.rar"&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS: Is there anybody who still codes for GB? :P&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some wrong definitions changed:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="./downloads/gbt_player_v1_1.7z"&gt;Download version 1.1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Updated some links to point at the correct locations of the tools as of
2018-01-29.&lt;/p&gt;
</content><category term="gameboy"></category><category term="programming"></category></entry></feed>